<?php

namespace App\data;

use App\Services\Utility\MyLogger;
use App\model\User;
use Illuminate\Contracts\Logging\Log;
use PDO;

Class SecurityDAO {
    
    private $databse = null;
    
    function __construct($database)
    {
        $this->database = $database;
    }
    
    public function findByUser(User $user)
    {
        MyLogger::info("Entering SecurityDAO.findByUser(User)");
        
        try{
            
            $userName = $user->getUserName();
            $password = $user->getPassword();
            
            $statement = $this->database->prepare('SELECT * FROM USERS WHERE USERNAME = :username and PASSWORD = :password');
            $statement->bindParam(':username', $userName);
            $statement->bindParam(':password', $password);
            $statement->execute();
            
            if($statement->rowCount() == 1)
            {
                MyLogger::info("Exit Security DAO.findByUser() with true");
                return true;
            }
            
            else
            {
                MyLogger::info("Exit Security DAO.findByUser() with false");
                return false;
            }
        }
        
        catch(\PDOException $e) {
            
            MyLogger::error("Exception: ", array("message" => $e->getMessage()));
            throw new DatabaseException("Database Exception: " . $e->getMessage(), 0, $e);
        }
    }
    
    public function findAllUsers()
    {
        MyLogger::info("Entering SecurityDAO.findAllUsers()");
        try
        {
            $statement = $this->database->prepare('SELECT * FROM USERS');
            $statement->execute();
            
            if($statement->rowCount() == 0)
            {
                return array();
            }
            
            else
            {
                $index = 0;
                $users = array();
                
                while($row = $statement->fetch(PDO::FETCH_ASSOC))
                {
                    $users[$index] = new User($row['ID'], $row['USERNAME'], $row['PASSWORD']);
                    $index++;
                }
                return $users;
            }
        }
        
        catch(\PDOException $e) {
            
            MyLogger::error("Exception: ", array("message" => $e->getMessage()));
            throw new DatabaseException("Database Exception: " . $e->getMessage(), 0, $e);
        }
    }
    
    public function findByUserId(int $userId)
    {
        echo "Inside findByUserId";
        try
        {
            $statement = $this->database->prepare('SELECT * FROM USERS WHERE ID = :id');
            $statement->bindParam(':id', $userId);
            $statement->execute();
            
            if($statement->rowCount() == 0)
            {
                echo "Returing Null";
                return null;
            }
            
            else
            {
                echo "Inside else";
                $row = $statement->fetch(PDO::FETCH_ASSOC);
                echo "Got Row";
                $user = new User($row['ID'], $row['USERNAME'], $row['PASSWORD']);
                echo "Created User";
                
                echo "User:" . $user->getUserName();
                return $user;
            }
        }
        
        catch(\PDOException $e) {
            
            MyLogger::error("Exception: ", array("message" => $e->getMessage()));
            throw new DatabaseException("Database Exception: " . $e->getMessage(), 0, $e);
        }
    }
}