<?php

/*
 * Bryce Schmisseur and Hermes Mimini
 * Job Match Application
 * LoginRegistrationController.php
 *
 */

namespace App\Http\Controllers;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use App\model\User;
use App\business\UserBusinessService;
use App\model\UserCredential;
use App\model\UserInformation;

session_start(); 

class LoginRegistrationController extends Controller
{
    private $service;
    
    /**
     * Defualt contstructor to initialize the Business Service object
     */
    function __construct()
    {
        $this->service = new UserBusinessService();
    }
    
    /**
     * Controller method when the user is trying to log in to make sure the user if valid before leading them to the homepage
     * @param Request $request
     * @return \Illuminate\View\View|\Illuminate\Contracts\View\Factory
     */
    public function authenticateUser(Request $request)
    {
        //Gathers the inforamtion from the login form
        $userName = $request->input('userName');
        $password = $request->input('password');
        
        //Creates a full user model inorder to send to the buessiness service
        $userCredentials = new UserCredential($userName, $password);
        $userInfo = new UserInformation("", null, null);
        $user = new User(0, "", "", "", "", 0, 1, $userCredentials, $userInfo);
        
        //Calls a business service method inorder to see if the user is able to login 
        if($this->service->authenticate($user, $request))
        {
            //If the users credetials are correct it will grab the overwritten user object from the session
            $currentUser = $_SESSION['currentUser'];
            
            //A descision is made to see if the account has been suspended
            if($currentUser->isActive() == 1)
            {
                //If the user is not suspended it will send the user to the homepage after setting the session of blade
                $request->session()->put('currentUser', $currentUser);
                $data = ['returnMessage' => "Welcome Back " . $currentUser->getFirstName()];
                return view('homePage')->with($data);
            }
            
            else 
            {
                //If the users account has been disabled the user will be sent back to the login form with an error messages displaying such
                $data = ['returnMessage' => "Your Account Has Been Temporarily Disabled!"];
                return view('login')->with($data);
            }
        }
        
        else
        {
            //If not user credentials match then the user will be sent back to the login form
            $data = ['returnMessage' => "Incorrect User Name or Password!"];
            return view('login')->with($data);
        }
        
    }
    
    /**
     * Controller method that takes in all information from registration form to push the information to the database
     * @param Request $request
     * @return \Illuminate\View\View|\Illuminate\Contracts\View\Factory
     */
    public function registerUser(Request $request)
    {
        $firstName =  $request->input('firstName');
        $lastName =  $request->input('lastName');
        $phoneNumber =  $request->input('phoneNumber');
        $email =  $request->input('email');
        $userName =  $request->input('userName');
        $password =  $request->input('password');
        
        $userCredentials = new UserCredential($userName, $password);
        $userInfo = new UserInformation("", null, null);
        $user = new User(0, $firstName, $lastName, $email, $phoneNumber, 1, 1, $userCredentials, $userInfo);
        
        $result = $this->service->create($user);
        
        if($result == 1)
        {
            $request->session()->put('currentUser', $_SESSION['currentUser']);
            $data = ['returnMessage' => "Thank you for Joining "  . $user->getFirstName()];
            return view('homePage')->with($data);
        }
        
        else if($result == 5)
        {
            $data = ['returnMessage' => "User Name Already Taken!"];
            return view('registration')->with($data); 
        }
        
        else
        {
            $data = ['returnMessage' => "Error Processing Request!"];
            return view('login')->with($data); 
        }
    }
    
    public function editUser(Request $request)
    {
        $firstName =  $request->input('firstName');
        $lastName =  $request->input('lastName');
        $phoneNumber =  $request->input('phoneNumber');
        $email =  $request->input('email');
        $userName =  $request->input('userName');
        $password =  $request->input('password');
        $bio =  $request->input('bio');
        $schoolName =  $request->input('schoolName');
        $degree =  $request->input('degree');
        $field =  $request->input('field');
        $educationStartDate =  $request->input('educationStartDate');
        $educationEndDate =  $request->input('educationEndDate');
        $educationDescription =  $request->input('educationDescription');
        $jobTitle =  $request->input('jobTitle');
        $companyName =  $request->input('companyName');
        $jobStartDate =  $request->input('jobStartDate');
        $jobEndDate =  $request->input('jobEndDate');
        $jobDescription =  $request->input('jobDescription');
        
        $currentUser = $request->session()->get('currentUser');
        $currentUserCredential = $currentUser->getUserCredential();
        $currentUserInforamtion = $currentUser->getUserInformation();
        
        $currentUser->setFirstName($firstName);
        $currentUser->setLastName($lastName);
        $currentUser->setPhoneNumber($phoneNumber);
        $currentUser->setEmail($email);
        
        $currentUserCredential->setUserName($userName);
        $currentUserCredential->setPassword($password);
        
        $currentUserInforamtion->setBio($bio);
        
        $currentEducation = $currentUserInforamtion->getEducationHistory()[0];
        
        $currentEducation->setName($schoolName);
        $currentEducation->setDegree($degree);
        $currentEducation->setField($field);
        $currentEducation->setStartDate($educationStartDate);
        $currentEducation->setEndDate($educationEndDate);
        $currentEducation->setDescription($educationDescription);
        
        $currentJob = $currentUserInforamtion->getJobs()[0];
        
        $currentJob->setTitle($jobTitle);
        $currentJob->setCompanyName($companyName);
        $currentJob->setStartingDate($jobStartDate);
        $currentJob->setEndingDate($jobEndDate);
        $currentJob->setDescription($jobDescription);
        
        $currentUserInforamtion->getEducationHistory()[0] = $currentEducation;
        $currentUserInforamtion->getJobs()[0] = $currentJob;
        $currentUser->setUserCredentials($currentUserCredential);
        $currentUser->setUserInformation($currentUserInforamtion);
        
        $this->service->update($currentUser);
        $_SESSION['currentUser'] = $currentUser;
        $request->session()->put('currentUser', $currentUser);
        return view('profile');
    }
    
    public function logout(Request $request)
    {
        $request->session()->forget('currentUser');
        return view('index');
    }
}
