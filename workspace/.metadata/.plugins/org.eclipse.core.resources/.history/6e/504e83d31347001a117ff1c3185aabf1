<?php

/*
 * Bryce Schmisseur and Hermes Mimini
 * Job Match Application
 * UserDataService.php
 *
 */

namespace App\data;

use App\model\User;
use App\model\Job;
use App\model\Education;
use App\model\UserCredential;
use App\model\UserInformation;

Class UserDataService implements DataServiceInterface {
    
    private $connection;
    
    public function __construct()
    {
        $database = new Database();
        $this->connection = $database->getConnection();
    }

    public function viewById(int $id)
    { 
        $indexJobs = 0;
        $indexEducation = 0; 
        
        $sql_query_user = "SELECT * FROM USER WHERE ID = {$id}";
        $sql_query_user_cred = "SELECT * FROM USER_CREDENTIAL WHERE USER_ID = {$id}";
        $sql_query_user_info = "SELECT * FROM USER_INFO WHERE USER_ID = {$id}";
        $sql_query_jobs = "SELECT * FROM JOB WHERE USER_ID = {$id}";
        $sql_query_education = "SELECT * FROM EDUCATION WHERE USER_ID = {$id}";
        
        $results_user = mysqli_query($this->connection, $sql_query_user);
        $results_user_cred = mysqli_query($this->connection, $sql_query_user_cred);
        $results_user_info = mysqli_query($this->connection, $sql_query_user_info);
        $results_job = mysqli_query($this->connection, $sql_query_jobs);
        $resutls_education = mysqli_query($this->connection, $sql_query_education);
        
        $rowUser = $results_user->fetch_assoc();
        $rowUserCred = $results_user_cred->fetch_assoc();
        $rowUserInfo = $results_user_info->fetch_assoc();
        
        $firstName = $rowUser['FIRSTNAME'];
        $lastName = $rowUser['LASTNAME'];
        $email = $rowUser['EMAIL'];
        $phoneNumber = $rowUser['PHONENUMBER'];
        $objectRole = $rowUser['USER_ROLE'];
        $active = $rowUser['ACTIVE'];
        $objectName = $rowUserCred['USERNAME'];
        $password = $rowUserCred['PASSWORD'];
        $bio = $rowUserInfo['BIO'];
        $jobs = array();
        $educationHistory = array();
        
        while($rowJobs = $results_job->fetch_assoc())
        {
            $jobId = $rowJobs['ID'];
            $jobTitle = $rowJobs['JOB_TITLE'];
            $company = $rowJobs['JOB_COMPANY'];
            $startDate = $rowJobs['START_DATE'];
            $endDate = $rowJobs['END_DATE'];
            $jobDescription = $rowJobs['DESCRIPTION'];
            
            $currentJob = new Job($jobId, $jobTitle, $company, $startDate, $endDate, $jobDescription);
            $jobs[$indexJobs] = $currentJob;
            $indexJobs++; 
        }
        
        while($rowEducation = $resutls_education->fetch_assoc())
        {
            $educationId = $rowEducation['ID'];
            $schoolName = $rowEducation['NAME'];
            $degree = $rowEducation['DEGREE'];
            $field = $rowEducation['FIELD'];
            $educationStartDate = $rowEducation['START_DATE'];
            $educationEndDate = $rowEducation['END_DATE'];
            $educationDescription = $rowEducation['DESCRIPTION'];
            
            $currentEducation = new Education($educationId, $schoolName, $degree, $field, $educationStartDate, 
                                              $educationEndDate, $educationDescription);
            $educationHistory[$indexEducation] = $currentEducation;
            $indexEducation++;
        }
        
        $currentUserCreds = new UserCredential($objectName, $password);
        $currentUserInfo = new UserInformation($bio, $jobs, $educationHistory);
        $currentUser = new User($id, $firstName, $lastName, $email, $phoneNumber, $objectRole, $active, $currentUserCreds, $currentUserInfo);
        
        return $currentUser;
    }

    public function create($object)
    {
        $sqlStatement = "INSERT INTO `user` (`ID`, `FIRSTNAME`, `LASTNAME`, `EMAIL`, `PHONENUMBER`, `USER_ROLE`, `ACTIVE`) 
                         VALUES (NULL, '{$object->getFirstName()}', '{$object->getLastName()}', '{$object->getEmail()}', 
                         '{$object->getPhoneNumber()}', '{$object->getUserRole()}', '{$object->isActive()}');";
        
        $result = $this->connection->query($sqlStatement);
        
        $objectID = mysqli_insert_id($this->connection);
        
        $object->setIdNum($objectID);
        
        if($result == false)
        {
            return $result;
        }
        
        else
        {
            $sqlStatement = "INSERT INTO `user_credential` (`USERNAME`, `PASSWORD`, `USER_ID`) VALUES 
                        ('{$object->getUserCredential()->getUserName()}', '{$object->getUserCredential()->getPassword()}', 
                        '{$object->getIdNum()}');";
            
            $result = $this->connection->query($sqlStatement);
            
            return $result;
        }
        
    }

    public function update($object)
    {
        $numRowsAffected = 0;
        
        $sqlUser = "UPDATE `USER` SET `FIRSTNAME` = '{$object->getFirstName}', `LASTNAME` = '{$object->getLastName()}', 
                    `EMAIL` = '{$object->getEmail()}', `PHONENUMBER` = '{$object->getPhoneNumber()}', `USER_ROLE` = 
                    '{$object->getUserRole()}', `ACTIVE` = '{$object->isActive()}' WHERE `USER`.`ID` = {$object->getIdNum()};";
        $sqlUserCreds = "UPDATE `USER_CREDENTIAL` SET `USERNAME` = '{$object->getUserCredential()->getUserName()}', 
                        `PASSWORD` = '{$object->getUserCredential()->getPassword()}' WHERE 
                        `USER_CREDENTIAL`.`USER_ID` = {$object->getIdNum()};";
        $sqlUserInfo = "UPDATE `USER_INFO` SET `BIO` = '{$object->getUserInformation()->getBio()}' WHERE 
                        `USER_INFO`.`USER_ID` = {$object->getIdNum()};";
        
        $this->connection->query($sqlUser);
        $numRowsAffected += $this->connection->affected_rows;
        $this->connection->query($sqlUserCreds);
        $numRowsAffected += $this->connection->affected_rows;
        $this->connection->query($sqlUserInfo);
        $numRowsAffected += $this->connection->affected_rows;
        
        foreach($object->getUserInformation()->getJobs() as $currentJob)
        {
            $sqlJob = "UPDATE `JOB` SET `JOB_TITLE` = '{$currentJob->getTitle()}', 
                      `JOB_COMPANY` = '{$currentJob->getCompanyName()}', `START_DATE` = '{$currentJob->getStartingDate()}', 
                      `END_DATE` = '{$currentJob->getEndingDate()}', `DESCRIPTION` = '{$currentJob->getDescription()}' WHERE 
                      `JOB`.`ID` = {$currentJob->getId()};";
            
            $this->connection->query($sqlJob);
            $numRowsAffected += $this->connection->affected_rows;
        }
        
        foreach($object->getUserInformation()->getEducationHistory() as $currentEducation)
        {
            $sqlEducation = "UPDATE `EDUCATION` SET `NAME` = '{$currentEducation->getName()}', `DEGREE` = '{$currentEducation->getDegree()}', 
                            `FIELD` = '{$currentEducation->getField()}', `START_DATE` = '{$currentEducation->getStartDate()}', 
                            `END_DATE` = '{$currentEducation->getEndDate()}', `DESCRIPTION` = '{$currentEducation->getDescription()}' 
                             WHERE `EDUCATION`.`ID` = {$currentEducation->getId()};";
            
            $this->connection->query($sqlEducation);
            $numRowsAffected += $this->connection->affected_rows;
        }
        
        return $numRowsAffected;
    }

    public function delete(int $id)
    {
        $numRowsAffected = 0;
        
        $sqlUser = "DELETE FROM `USER` WHERE `ID`= {$id};";
        $sqlUserCred = "DELETE FROM `USER_CREDENTIAL` WHERE `USER_ID`= {$id};";
        $sqlUserInfo = "DELETE FROM `USER_INFO` WHERE `USER_ID`= {$id};";
        $sqlJobs = "DELETE FROM `JOB` WHERE `USER_ID`= {$id};";
        $sqlEducation = "DELETE FROM `EDUCATION` WHERE `USER_ID`= {$id};";
        
        $this->connection->query($sqlUserCred);
        $numRowsAffected += $this->connection->affected_rows;
        
        $this->connection->query($sqlUserInfo);
        $numRowsAffected += $this->connection->affected_rows;
        
        $this->connection->query($sqlJobs);
        $numRowsAffected += $this->connection->affected_rows;
        
        $this->connection->query($sqlEducation);
        $numRowsAffected += $this->connection->affected_rows;
        
        $this->connection->query($sqlUser);
        $numRowsAffected += $this->connection->affected_rows;
        
        return $numRowsAffected;
    }

    public function viewAll()
    {
        $objects = array(); 
        $indexUser = 0; 
        
        $sqlQuery = "SELECT * FROM USER";
        $resutls = mysqli_query($this->connection, $sqlQuery);
        
        while($row = $resutls->fetch_assoc())
        {
            $id = $row['ID'];
            
            $currentUser = $this->viewByID($id);
            
            $objects[$indexUser] = $currentUser;
            $indexUser++;
        }
        
        return $objects;
    }



    
}